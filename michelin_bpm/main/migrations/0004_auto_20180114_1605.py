# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-01-14 16:05
from __future__ import unicode_literals

from django.db import migrations, connection


def create_trigger(apps, schema_editor):
    if connection.vendor == 'postgresql':
        Correction = apps.get_model('main', 'Correction')
        Task = apps.get_model('viewflow', 'Task')

        cursor = connection.cursor()
        cursor.execute('''
            CREATE FUNCTION validate_only_one_active_correction_for_proposal_and_task() returns trigger as $$
            DECLARE active_corrections_count int;
            DECLARE flow_task_name varchar;
            BEGIN
                flow_task_name := (select flow_task from {task_table} where id = NEW.task_id);
                active_corrections_count := (
                    SELECT
                        count({correction_table}.id)
                    FROM
                        {correction_table}
                    JOIN
                        {task_table} on {correction_table}.task_id = {task_table}.id
                    WHERE
                        {correction_table}.proposal_id = NEW.proposal_id AND
                        {correction_table}.is_active = true AND
                        {task_table}.flow_task = flow_task_name
                );
                IF (active_corrections_count > 1) THEN
                    RAISE EXCEPTION
                        'ProposalProcess has to have only one active Correction for single Task name (flow_task).
                        Debug info: proposal_id=%, flow_task=%', NEW.proposal_id, flow_task_name;
                END IF;
                  RETURN NULL;
            END;
            $$ language plpgsql;

            CREATE CONSTRAINT TRIGGER only_one_active_correction_for_proposal_and_task
            AFTER INSERT OR UPDATE ON {correction_table}
            DEFERRABLE INITIALLY DEFERRED
            FOR EACH ROW
            EXECUTE PROCEDURE validate_only_one_active_correction_for_proposal_and_task();
            '''.format(correction_table=Correction._meta.db_table, task_table=Task._meta.db_table)
        )


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0003_auto_20180114_1604'),
    ]

    operations = [
    	migrations.RunPython(create_trigger)
    ]
